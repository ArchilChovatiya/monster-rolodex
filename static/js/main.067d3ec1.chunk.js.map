{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","src","this","props","monsters","id","name","email","Component","CardList","map","monsternames","key","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","filteredMonsters","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAgBeA,G,yLAVX,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,QAAQC,IAAG,+BAA0BC,KAAKC,MAAMC,SAASC,GAA9C,eAC1B,uBAAGL,UAAU,UAAUE,KAAKC,MAAMC,SAASE,MAC3C,uBAAGN,UAAU,UAAUE,KAAKC,MAAMC,SAASG,Y,GAPhCC,cCgBJC,MAff,SAAkBN,GACd,OACE,yBAAKH,UAAU,aAEbG,EAAMC,SAASM,KAAI,SAAAC,GAAY,OAC/B,kBAAC,EAAD,CAAMC,IAAKD,EAAaN,GAAID,SAAUO,SCS/BE,G,6KAXX,OACE,2BACEb,UAAU,SACVc,KAAK,SACLC,YAAab,KAAKC,MAAMY,YACxBC,SAAUd,KAAKC,MAAMc,mB,GATLT,cC2CTU,E,kDAvCb,aAAc,IAAD,8BACX,gBAkBDD,aAAc,SAACE,GAAK,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBzD,EAAKC,MAAQ,CACXpB,SAAU,GACViB,YAAa,IAJJ,E,gEASO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAAChB,SAAUyB,S,+BAU/D,IAAD,EAEwB3B,KAAKsB,MAA7BpB,EAFA,EAEAA,SAASiB,EAFT,EAESA,YACVS,EAAmB1B,EAAS2B,QAAO,SAAA3B,GAAQ,OAAIA,EAASE,KAAK0B,cAChEC,SAASZ,EAAYW,kBAExB,OACE,yBAAMhC,UAAU,OACd,wBAAIA,UAAU,SAAd,mBACA,kBAAC,EAAD,CAAWe,YAAY,kBAAkBE,aAAcf,KAAKe,eAC5D,kBAAC,EAAD,CAAUb,SAAU0B,S,GAjCVtB,aCOE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.067d3ec1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Card.css';\n\nclass Card extends Component {\n\n  render() {\n    return (\n      <div className=\"card-container\">\n        <img className='image' src={`https://robohash.org/${this.props.monsters.id}?set=set2`}/>\n        <p className=\"text-1\">{this.props.monsters.name}</p>\n        <p className=\"text-2\">{this.props.monsters.email}</p>\n        </div>\n    );\n  }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport './CardList.css';\nimport Card from '../Card/Card';\n\nfunction CardList(props) {\n    return (\n      <div className=\"card-list\">\n        {\n        props.monsters.map(monsternames =>(\n        <Card key={monsternames.id} monsters={monsternames}/>\n        ))\n      }\n      </div>\n    );\n  }\n\n\n\n\nexport default CardList;","import React, { Component } from 'react';\nimport './SearchBox.css';\n\nclass SearchBox extends Component {\n \n  render() {\n   \n    return (\n      <input  \n        className='search'\n        type=\"search\" \n        placeholder={this.props.placeholder} \n        onChange={this.props.handleChange}>\n        </input>\n    );\n  }\n}\n\nexport default SearchBox;","import React,{Component} from 'react';\nimport './App.css';\nimport CardList from './components/CardList/CardList';\nimport SearchBox from './components/SearchBox/SearchBox';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n    //this.handleChange=this.handleChange.bind(this);\n  }\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json()).then(users =>this.setState({monsters: users})) \n     \n   }\n \n  /*handleChange(e)\n  {\n    this.setState({ searchField: e.target.value})\n  }*/\n   handleChange =(e)=>{this.setState({ searchField: e.target.value})}\n\n  render() {\n\n    const {monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monsters => monsters.name.toLowerCase()\n      .includes(searchField.toLowerCase()));\n      \n    return (\n      <div  className=\"App\">\n        <h1 className='title'>Monster Rolodex</h1>{/* fonts taken from fonts.google,com and link added in index.html */}\n        <SearchBox placeholder=\"search monsters\" handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters} \n         />\n    </div>\n    )\n  }\n} \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}